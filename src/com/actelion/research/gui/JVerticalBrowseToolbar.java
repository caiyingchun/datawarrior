/* * Copyright 2014 Actelion Pharmaceuticals Ltd., Gewerbestrasse 16, CH-4123 Allschwil, Switzerland * * This file is part of DataWarrior. *  * DataWarrior is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 3 of * the License, or (at your option) any later version. *  * DataWarrior is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * See the GNU General Public License for more details. * You should have received a copy of the GNU General Public License along with DataWarrior. * If not, see http://www.gnu.org/licenses/. * * @author Thomas Sander */package com.actelion.research.gui;import java.awt.*;import java.awt.event.*;import java.io.*;import javax.swing.*;public class JVerticalBrowseToolbar extends JPanel implements MouseListener {	private static final long serialVersionUID = 20150101L;	private ActionListener	mListener;	private Image			mImage,mImageUp,mImageDown;	private int				mPressedButton;	private Dimension		mSize;	public JVerticalBrowseToolbar() {		MediaTracker t = new MediaTracker(this);		mImageDown = getImageResource("verticalBrowseButtonsDown.gif");		mImageUp = getImageResource("verticalBrowseButtonsUp.gif");		t.addImage(mImageUp,0);		t.addImage(mImageDown,0);		try {			t.waitForAll();			}		catch (InterruptedException e) {}		int w = mImageUp.getWidth(this);		int h = mImageUp.getHeight(this);		mSize = new Dimension(w, h);		mPressedButton = -1;		addMouseListener(this);		}	public Dimension getPreferredSize() {		return mSize;		}	public Dimension getMinimumSize() {		return mSize;		}	public Dimension getMaximumSize() {		return mSize;		}	public void addActionListener(ActionListener l) {		mListener = l;		}	public void paintComponent(Graphics g) {		super.paintComponent(g);		if (mImage == null) {			mImage = createImage(mImageUp.getWidth(null), mImageUp.getHeight(null));			mImage.getGraphics().drawImage(mImageUp, 0, 0, this);			}		g.drawImage(mImage,0,0,this);		}	public void mousePressed(MouseEvent e) {		int x = e.getX();		int y = e.getY();		int b = getButtonNo(x,y);		if (b == -1) return;		pressButton(b);		}	public void mouseReleased(MouseEvent e) {		if (mPressedButton == -1) return;		releaseButton(mPressedButton);		return;		}	public void mouseEntered(MouseEvent e) {}	public void mouseExited(MouseEvent e) {}	public void mouseClicked(MouseEvent e) {}	private int getButtonNo(int x, int y) {		if (x<0 || x>15 || y<0 || y>61) return -1;		x -= 2;		y -= 2;		if ((x % 15) > 11) return -1;		if ((y % 15) > 11) return -1;		return y/15;		}	private void pressButton(int b) {		int y = 15 * b + 1;		Graphics g = mImage.getGraphics();		g.setClip(1,y,14,14);		g.drawImage(mImageDown,0,0,this);		repaint();		mPressedButton = b;		}	private void releaseButton(int b) {		String command = "";		int y = 15 * b + 1;		Graphics g = mImage.getGraphics();		g.setClip(1,y,14,14);		g.drawImage(mImageUp,0,0,this);		repaint();		switch (mPressedButton) {		case 0: command = "|<"; break;		case 1: command = "<"; break;		case 2: command = ">"; break;		case 3: command = ">|"; break;			}		mPressedButton = -1;		mListener.actionPerformed(new ActionEvent(this,								  ActionEvent.ACTION_PERFORMED,command));		}	private Image getImageResource(String imageFileName) {		Toolkit tk = Toolkit.getDefaultToolkit();		Image im=null;		try {			BufferedInputStream in=new BufferedInputStream(getClass().getResourceAsStream("/images/"+imageFileName));			byte[] imageData= new byte[1000]; // a problem with size though... make it as big as necassary			in.read(imageData);			im=tk.createImage(imageData);			}		catch (Exception e) {			System.out.println("Error loading images: "+e);			}		return im;		}	}
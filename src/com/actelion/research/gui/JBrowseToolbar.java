/* * Copyright 2014 Actelion Pharmaceuticals Ltd., Gewerbestrasse 16, CH-4123 Allschwil, Switzerland * * This file is part of DataWarrior. *  * DataWarrior is free software: you can redistribute it and/or modify it under the terms of the * GNU General Public License as published by the Free Software Foundation, either version 3 of * the License, or (at your option) any later version. *  * DataWarrior is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * See the GNU General Public License for more details. * You should have received a copy of the GNU General Public License along with DataWarrior. * If not, see http://www.gnu.org/licenses/. * * @author Thomas Sander */package com.actelion.research.gui;import java.awt.*;import java.awt.event.*;import java.io.*;import javax.swing.*;public class JBrowseToolbar extends JPanel implements KeyListener,MouseListener {    private static final long serialVersionUID = 0x20090803;    private ActionListener	mListener;	private Image			mOffImage,mImageUp,mImageDown;	private Graphics		mOffG;	private int				mPressedButton;	private boolean         mShiftPressed;	private Dimension		mSize;	public JBrowseToolbar() {		MediaTracker t = new MediaTracker(this);		mImageDown = getImageResource("browseButtonsDown.gif");		mImageUp = getImageResource("browseButtonsUp.gif");		t.addImage(mImageUp,0);		t.addImage(mImageDown,0);		try {			t.waitForAll();			}		catch (InterruptedException e) {}		int w = mImageUp.getWidth(this);		int h = mImageUp.getHeight(this);		mSize = new Dimension(w, h);		mPressedButton = -1;		addMouseListener(this);		addKeyListener(this);		setFocusable(true);		}	public Dimension getPreferredSize() {		return mSize;		}	public Dimension getMinimumSize() {		return mSize;		}	public Dimension getMaximumSize() {		return mSize;		}	public void addActionListener(ActionListener l) {		mListener = l;		}	public void paint(Graphics g) {		if (mOffG == null) {			Dimension theSize = getSize();			mOffImage = createImage(theSize.width,theSize.height);			mOffG = mOffImage.getGraphics();			mOffG.drawImage(mImageUp,0,0,this);			}		g.drawImage(mOffImage,0,0,this);		}	public void update(Graphics g) {		paint(g);		}	public void mousePressed(MouseEvent e) {        requestFocus();		int x = e.getX();		int y = e.getY();		int b = getButtonNo(x,y);		if (b == -1) return;		pressButton(b);		}	public void mouseReleased(MouseEvent e) {		if (mPressedButton == -1) return;		releaseButton(mPressedButton);		return;		}	public void mouseEntered(MouseEvent e) {}	public void mouseExited(MouseEvent e) {}	public void mouseClicked(MouseEvent e) {}	private int getButtonNo(int x, int y) {		if (x<0 || x>86 || y<0 || y>23) return -1;		x -= 3;		y -= 3;		if ((x % 21) > 17) return -1;		if ((y % 21) > 17) return -1;		return x/21;		}	private void pressButton(int b) {        int x = 21 * b + 2;		mOffG.setClip(x,2,20,20);		mOffG.drawImage(mImageDown,0,0,this);		repaint();		mPressedButton = b;		}	private void releaseButton(int b) {		String command = "";		int x = 21 * b + 2;		mOffG.setClip(x,2,20,20);		mOffG.drawImage(mImageUp,0,0,this);		repaint();		switch (mPressedButton) {		case 0: command = "|<"; break;		case 1: command = "<"; break;		case 2: command = ">"; break;		case 3: command = ">|"; break;			}		mPressedButton = -1;		mListener.actionPerformed(new ActionEvent(this,								  ActionEvent.ACTION_PERFORMED,command));		}	public void keyPressed(KeyEvent e) {	    int code = e.getKeyCode();	    if (code == KeyEvent.VK_SHIFT) {	        mShiftPressed = true;	        }	    else if (code == KeyEvent.VK_LEFT) {	        mPressedButton = mShiftPressed ? 0 : 1;	        pressButton(mPressedButton);	        }        else if (code == KeyEvent.VK_RIGHT) {            mPressedButton = mShiftPressed ? 3 : 2;	        pressButton(mPressedButton);            }	    }	public void keyReleased(KeyEvent e) {	    if (e.getKeyCode() == KeyEvent.VK_SHIFT)	        mShiftPressed = false;	    else if (mPressedButton != -1) {	        releaseButton(mPressedButton);	        mPressedButton = -1;	        }	    }	public void keyTyped(KeyEvent e) {}	private Image getImageResource(String imageFileName) {		Toolkit tk = Toolkit.getDefaultToolkit();		Image im=null;		try {			BufferedInputStream in=new BufferedInputStream(getClass().getResourceAsStream("/images/"+imageFileName));			byte[] imageData= new byte[10000]; // a problem with size though... make it as big as necassary			in.read(imageData);			im=tk.createImage(imageData);			}		catch (Exception e) {			System.out.println("Error loading images: "+e);			}		return im;		}	}